The dot (.) matches anything (except for a newline).
Note: If you want to match (.) in the test string, you need to escape the dot by using a slash \.
In Java, use \\. instead of \.

The ^ symbol matches the position at the start of a string.
The $ symbol matches the position at the end of a string.

The expression \d matches any digit [ - ].
The expression \D matches any character that is not a digit.

\s matches any whitespace character [ \r\n\t\f](include space).
\S matches any non-white space character.

The expression \w will match any word character.
Word characters include alphanumeric characters (a-z, A-Z and 0-9) and underscores (_).
\W matches any non-word character.
Non-word characters include characters other than alphanumeric characters (a-z, A-Z and 0-9) and underscore (_).

The character class [ ] matches only one out of several characters placed inside the square brackets.
The negated character class [^] matches any character that is not in the square brackets.

A hyphen (-) inside a character class specifies a range of characters where the left and right operands are the respective lower and upper bounds of the range. For example:

[a-z] is the same as [abcdefghijklmnopqrstuvwxyz]
[A-Z] is the same as [ABCDEFGHIJKLMNOPQRSTUVWYZ]
[0-9] is the same as [0123456789]
In addition, if you use a caret (^) as the first character inside a character class, it will match anything that is not in that range.

The tool {x} will match exactly repetitions of character/character class/groups.
The {x,y} tool will match between and (both inclusive) repetitions of character/character class/group.
e.g.: [xyz]{5,} : It will match the character x, y or z or more times.

The * tool will match zero or more repetitions of character/character class/group.
e.g.: w*, [xyz]*, \d*
The + tool will match one or more repetitions of character/character class/group.

\b assert position at a word boundary.(https://www.hackerrank.com/challenges/matching-word-boundaries/problem)
Three different positions qualify for word boundaries :
► Before the first character in the string, if the first character is a word character.
► Between two characters in the string, where one is a word character and the other is not a word character.
► After the last character in the string, if the last character is a word character.
e.g.: \bcat\b --> Acat a cat --> cat

Parenthesis ( ) around a regular expression can group that part of regex together. This allows us to apply different quantifiers to that group.
These parenthesis also create a numbered capturing. It stores the part of string matched by the part of regex inside parentheses.
These numbered capturing can be used for backreferences.
e.g.: (ok){3,}
(?:) creates a non-capturing group. It groups things together without creating a backreference.

Alternations, denoted by the | character, match a single item out of several possible items separated by the vertical bar. When used inside a character class, it will match characters; when used inside a group, it will match entire expressions (i.e., everything to the left or everything to the right of the vertical bar). We must use parentheses to limit the use of alternations. 
e.g.:
    (Bob|Kevin|Stuart) will match either Bob or Kevin or Stuart.
    ([a-f]|[A-F]) will match any of the following characters: a, b, c, d, e, f, A, B, C, D, E, or F.

\groupnumber
This tool (\1 references the first capturing group) matches the same text as previously matched by the capturing group.
e.g.: (\w)(\w)(\w)(\w)y\4\3\2\1 --> malayalam
https://www.hackerrank.com/challenges/backreferences-to-failed-groups/problem
https://www.hackerrank.com/challenges/branch-reset-groups/problem

https://www.hackerrank.com/challenges/positive-lookahead/problem
https://www.hackerrank.com/challenges/negative-lookahead/problem
https://www.hackerrank.com/challenges/positive-lookbehind/problem
https://www.hackerrank.com/challenges/negative-lookbehind/problem
 

*?, +?, ??

The '*', '+', and '?' qualifiers are all greedy; they match as much text as possible. Sometimes this behaviour isn’t desired; if the RE <.*> is matched against '<a> b <c>', it will match the entire string, and not just '<a>'. Adding ? after the qualifier makes it perform the match in non-greedy or minimal fashion; as few characters as possible will be matched. Using the RE <.*?> will match only '<a>'.






# Example: 
import re
pattern = re.compile(r"\[(on|off)\]") # Slight optimization
print(re.search(pattern, "Mono: Playback 65 [75%] [-16.50dB] [on]"))
# Returns a Match object!
print(re.search(pattern, "Nada...:-("))
# Doesn't return anything.
# End Example

# Exercise: make a regular expression that will match an email
def test_email(your_pattern):
    pattern = re.compile(your_pattern)
    emails = ["john@example.com", "python-list@python.org", "wha.t.`1an?ug{}ly@email.com"]
    for email in emails:
        if not re.match(pattern, email):
            print("You failed to match %s" % (email))
        elif not your_pattern:
            print("Forgot to enter a pattern!")
        else:
            print("Pass")
pattern = r"" # Your pattern here!
test_email(pattern)



